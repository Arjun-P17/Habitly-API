scalar UUID
scalar Long
scalar Instant


type Query {
    workouts(input: PageInfoInput): WorkoutsResponse
    workout(id: String): Workout
    workoutHistory(input: PageInfoInput): WorkoutHistoryResponse
    workoutEvent(id: String): WorkoutEvent
}

type Mutation {
    upsertWorkout(input: workoutInput): Workout
    removeWorkout(workoutId: String!): Boolean

    upsertWorkoutEvent(input: workoutEventInput): WorkoutEvent
    removeWorkoutEvent(workoutEventId: String!): Boolean

    upsertExercise(input: exerciseInput): Exercise
    removeExercise(exerciseId: String!): Boolean
}

type Workout {
    id: UUID!
    name: String!
    description: String
    type: WorkoutType!
    duration: Long!
    exercises: [Exercise!]!
}

enum WorkoutType {
    CARDIO
    WEIGHTS
    STRETCH
}

type Exercise {
    id: UUID!
    name: String!
    description: String
    sets: Int!
    reps: Int!
}

input exerciseInput {
    id: UUID
    name: String!
    description: String
    sets: Int!
    reps: Int!
}

type WorkoutEvent {
    id: UUID!
    start: Instant!
    end: Instant!
    workout: Workout!
}

input workoutInput {
    id: UUID
    name: String!
    description: String
    type: WorkoutType!
    duration: Long!
    exercises: [UUID!]
}

input workoutEventInput {
    id: UUID
    workoutId: UUID!
    start: Long!
    end: Long!
}

input PageInfoInput {
    offset: Int
    pageSize: Int
}

type PageInfo {
    offset: Int
    pageSize: Int
    hasMore: Int
    totalCount: Int
}

type WorkoutsResponse {
    workouts: [Workout!]
}

type WorkoutHistoryResponse {
    workoutHistory: [WorkoutEvent!]
}